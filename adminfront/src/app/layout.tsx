"use client"

import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import Sidebar from "@/components/sidebar";
import Breadcrumbs from "@/components/breadcrumbs";
import { Toaster } from "@/components/ui/toaster";
import { useEffect, useRef } from "react";
import { toast } from "@/hooks/use-toast";

// export const metadata: Metadata = {
//   title: "Administrador E-commerce",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const ws = useRef<WebSocket | null>(null);
  const url = process.env.NEXT_PUBLIC_WS_URL as string;
  useEffect(() => {
    // Initialize WebSocket connection
    ws.current = new WebSocket(url+'?rol=admin&id='+Math.floor(Math.random()*100000));

    // Handle WebSocket open event
    ws.current.onopen = () => {
      console.log('WebSocket connection opened');
    };

    // Handle WebSocket message event
    ws.current.onmessage = (event) => {
      console.log('WebSocket message received:', event.data);
      // AquÃ­ Ami se puede hacer lo que quieras con el mensaje recibido
      toast({
        variant: "destructive",
        description: event.data,
      });
    };

    // Handle WebSocket error event
    ws.current.onerror = (error) => {
      console.error('WebSocket error:', error);
    };

    // Handle WebSocket close event
    ws.current.onclose = () => {
      console.log('WebSocket connection closed');
    };

    // Cleanup on unmount
    return () => {
      if (ws.current) {
        ws.current.close();
      }
    };
  }, []);


  return (
    <html lang="es">
      <body className="min-h-screen max-h-screen flex overflow-hidden">
        <Sidebar />
        <main className="flex-1 flex flex-col p-8 overflow-hidden">
          <Breadcrumbs />
          {children}
        </main>
        <Toaster />
      </body>
    </html>
  );
}
