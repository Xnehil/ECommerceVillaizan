"use client"

import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import Sidebar from "@/components/sidebar";
import Breadcrumbs from "@/components/breadcrumbs";
import { Toaster } from "@/components/ui/toaster";
import { useEffect, useRef } from "react";
import { toast } from "@/hooks/use-toast";
import { ToastAction } from "@/components/ui/toast";
import { useRouter } from "next/navigation";

// export const metadata: Metadata = {
//   title: "Administrador E-commerce",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const ws = useRef<WebSocket | null>(null);
  const url = process.env.NEXT_PUBLIC_WS_URL as string;
  const router = useRouter();
  useEffect(() => {
    // Initialize WebSocket connection
    ws.current = new WebSocket(url+'?rol=admin&id='+Math.floor(Math.random()*100000));

    // Handle WebSocket open event
    ws.current.onopen = () => {
      console.log('WebSocket connection opened');
    };

    // Handle WebSocket message event
    ws.current.onmessage = (event) => {
      console.log('WebSocket message received:', event.data);
    
      try {
        // Parse the JSON string
        const data = JSON.parse(event.data);
        // console.log('Parsed WebSocket message:', data);
        if (data.message) {
          toast({
            title: data.title ?? "",
            description: (
              <div>
                <p>{data.message}</p>
              </div>
            ),
          });
        } else if (data.type && data.data){
             mapearMensaje(data.type, router, data.data);
        }else {
          console.error('Message property not found in WebSocket data:', data);
        }
      } catch (error) {
        console.error('Failed to parse WebSocket message:', error);
      }
    };

    // Handle WebSocket error event
    ws.current.onerror = (error) => {
      console.error('WebSocket error:', error);
    };

    // Handle WebSocket close event
    ws.current.onclose = () => {
      console.log('WebSocket connection closed');
    };

    // Cleanup on unmount
    return () => {
      if (ws.current) {
        ws.current.close();
      }
    };
  }, []);


  return (
    <html lang="es">
      <body className="min-h-screen max-h-screen flex overflow-hidden">
        <Sidebar />
        <main className="flex-1 flex flex-col p-8 overflow-hidden">
          <Breadcrumbs />
          {children}
        </main>
        <Toaster />
      </body>
    </html>
  );
}

const mapearMensaje = (tipo: string, router: any, data: any) => {
  let dataBonita;
  switch (tipo) {
    case "nuevoPedido":
      dataBonita = {
        type: "Nuevo pedido",
        data: "Ha llegado un nuevo pedido, ve a la página de Pedidos para confirmarlo",
        action: "/pedidos",
        button: "Ver pedidos",
      };
      break;
    default:
      dataBonita = {
        type: "Mensaje de tipo: " + tipo,
        data: "Se ha recibido un mensaje: " + data,
        action: "/notificaciones",
        button: "Ver notificaciones",
      };
  }

  let buttonClassName = "text-black-600 mt-2 ml-6 p-2 rounded-md h-10" + (tipo === "nuevoPedido" ? "bg-white" : "")

  toast({
    title: dataBonita.type,
    variant: tipo === "nuevoPedido" ? "center" : "default",
    description: (
      <div className="flex justify-between items-center">
        <p>{dataBonita.data}</p>
        <ToastAction
          onClick={() => { router.push(dataBonita.action); }}
          altText="Ir a la página de notificaciones"
          className={buttonClassName}
        >
          {dataBonita.button}
        </ToastAction>
      </div>
    ),
  });
};